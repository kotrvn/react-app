{"version":3,"sources":["context/alert/alertContext.js","context/firebase/firebaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","pages/About.js","components/Navbar.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","event","preventDefault","trim","addNote","then","show","catch","className","type","placeholder","onChange","e","target","Notes","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","date","onClick","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","About","class","Navbar","to","exact","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebaseReducer","handle","default","url","process","FirebaseState","showLoader","a","axios","get","res","data","Object","keys","Date","toJSON","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59027c28.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nexport const AlertContext = createContext();\r\n","import {createContext} from 'react'\r\n\r\nexport const FirebaseContext = createContext();","import React, {useState, useContext} from 'react';\r\nimport { AlertContext } from '../context/alert/alertContext';\r\nimport { FirebaseContext } from '../context/firebase/firebaseContext';\r\n\r\nexport const Form = () => {\r\n\r\n    const [value, setValue] = useState('')\r\n    const alert = useContext(AlertContext)\r\n    const firebase = useContext(FirebaseContext)\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault()\r\n\r\n        if (value.trim()) {\r\n            firebase.addNote(value.trim()).then(()=>{\r\n                alert.show('Заметка была создана', 'success')\r\n            }).catch(() => {\r\n                alert.show('Что то пошло не так', 'danger')\r\n            })\r\n            setValue('')\r\n        } else {\r\n            alert.show('Введите название заметки')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className='form-group'>\r\n                <input \r\n                    className='form-control' \r\n                    type='text'\r\n                    placeholder='Введите название заметки'\r\n                    value={value}\r\n                    onChange={e => setValue(e.target.value)}\r\n                    />\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from 'react';\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\r\n\r\nexport const Notes = ({notes, onRemove}) => (\r\n    <TransitionGroup component='ul' className='list-group'>\r\n            {notes.map(note => (\r\n                <CSSTransition\r\n                    key={note.id}\r\n                    classNames={'note'}\r\n                    timeout={800}\r\n                    >\r\n                    <li \r\n                    className='list-group-item note' \r\n                    \r\n                    >\r\n                    <div>\r\n                        <strong>{note.title}</strong>\r\n                        <small>{note.date}</small>\r\n                    </div>\r\n                    \r\n\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"btn btn-outline-danger btn-sm\"\r\n                        onClick={() => onRemove(note.id)}\r\n                        >\r\n                        &times;\r\n                        </button>\r\n                    </li>\r\n                </CSSTransition>\r\n            ))}\r\n    </TransitionGroup>\r\n)","import React from 'react';\r\n\r\nexport const Loader = () => (\r\n     // eslint-disable-next-line\r\n    <div className='text-center'>\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n)\r\n ","import React, { Fragment, useContext, useEffect } from 'react';\r\nimport { Form } from '../components/Form';\r\nimport { Notes } from '../components/Notes';\r\nimport { FirebaseContext } from '../context/firebase/firebaseContext';\r\nimport { Loader } from '../components/Loader';\r\n\r\nexport const Home = () => {\r\n   const {loading, notes, fetchNotes, removeNote} = useContext(FirebaseContext)\r\n\r\n   useEffect( () => {\r\n       fetchNotes()\r\n       //eslint-disable-next-line\r\n   }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form/>\r\n\r\n            <hr/>\r\n\r\n            {loading\r\n                ? <Loader/>\r\n                : <Notes notes={notes} onRemove={removeNote}/>\r\n            }\r\n        </Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const About = () => (\r\n    <div class=\"jumbotron\">\r\n        <div class=\"container\">\r\n            <h1 class=\"display-4\">Лучшее реакт приложение</h1>\r\n            <p class=\"lead\">Версия приложения <strong>1.0.42</strong></p>\r\n        </div>\r\n    </div>\r\n)","import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport const Navbar = () => (\r\n    <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\r\n        <div className=\"navbar-brand\">\r\n            Note App\r\n        </div>\r\n        <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n                <NavLink \r\n                    className=\"nav-link\" \r\n                    to=\"/\"\r\n                    exact>\r\n                Главная\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink \r\n                    className=\"nav-link\" \r\n                    to=\"/about\">\r\n                Информация\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)","import React, {useContext} from 'react'\r\nimport {CSSTransition} from 'react-transition-group'\r\nimport { AlertContext } from '../context/alert/alertContext'\r\n\r\n\r\nexport const Alert = () => {\r\n    const {alert, hide} = useContext(AlertContext)\r\n\r\n    return(\r\n        <CSSTransition\r\n            in={alert.visible}\r\n            timeout={{\r\n                enter: 500,\r\n                exit: 350\r\n            }}\r\n            classNames='alert'\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <div className={`container mt-1 mb-0 alert alert-${alert.type || \"warning\"} alert-dismissible`}>\r\n                <strong>Внимание! </strong>\r\n                {alert.text}\r\n                <button onClick={hide} type=\"button\" className=\"close\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n}\r\n\r\n\r\n","import { SHOW_ALERT, HIDE_ALERT } from \"../types\"\r\n\r\nconst handlers = {\r\n    [SHOW_ALERT]: (state, {payload}) => ({...payload, visible: true}),\r\n    [HIDE_ALERT]: state => ({...state, visible: false}),\r\n    DEFAULT: state => state\r\n}\r\n\r\n\r\nexport const alertReducer = (state, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT\r\n    return handle(state, action)\r\n}  ","export const SHOW_ALERT = 'SHOW_ALERT'\r\nexport const HIDE_ALERT = 'HIDE_ALERT'\r\nexport const SHOW_LOADER = 'SHOW_LOADER'\r\nexport const ADD_NOTE = 'ADD_NOTE'\r\nexport const FETCH_NOTES = 'FETCH_NOTES'\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE'\r\n","import React, {useReducer} from 'react';\r\nimport { AlertContext } from './alertContext';\r\nimport { alertReducer } from './alertReducer';\r\nimport { SHOW_ALERT, HIDE_ALERT } from '../types';\r\n\r\nexport const AlertState = ({children}) => {\r\n    const [state, dispatch] = useReducer(alertReducer, {visible: false})\r\n\r\n    const show = (text, type='warning') => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: {text, type}\r\n        })\r\n    }\r\n\r\n    const hide = () => dispatch({type: HIDE_ALERT})\r\n\r\n    return (\r\n        <AlertContext.Provider value={{\r\n            show, hide,\r\n            alert: state\r\n        }}>\r\n            {(children)}\r\n        </AlertContext.Provider>\r\n    )\r\n}","import { ADD_NOTE, SHOW_LOADER, FETCH_NOTES, REMOVE_NOTE } from \"../types\";\r\n\r\nconst handlers = {\r\n    [SHOW_LOADER]: state => ({...state, loading: true}),\r\n    [ADD_NOTE]: (state, {payload}) => ({\r\n        ...state,\r\n        notes: [...state.notes, payload]\r\n    }),\r\n    [FETCH_NOTES]: (state, {payload}) => ({...state, notes: payload, loading: false}),\r\n    [REMOVE_NOTE]: (state, {payload}) => ({\r\n        ...state,\r\n        notes: state.notes.filter(note => note.id !== payload)\r\n    }),\r\n    DEFAULT: state => state\r\n}\r\nexport const firebaseReducer = (state, action) => {\r\n    const handle = handlers[action.type || handlers.default]\r\n    return handle(state, action);\r\n}","import React, {useReducer} from 'react';\r\nimport axios from 'axios';\r\nimport { firebaseReducer } from './firebaseReducer';\r\nimport { FirebaseContext } from './firebaseContext';\r\nimport { SHOW_LOADER, REMOVE_NOTE, ADD_NOTE, FETCH_NOTES} from '../types';\r\n\r\nconst url = process.env.REACT_APP_DB_URL;\r\n\r\nexport const FirebaseState = ({children}) => {\r\n    const initialState = {\r\n        notes: [],\r\n        loading: false\r\n    }\r\n    const [state, dispatch] = useReducer(firebaseReducer, initialState)\r\n\r\n    const showLoader = () => dispatch({type: SHOW_LOADER});\r\n\r\n    const fetchNotes = async () => {\r\n        showLoader()\r\n        const res = await axios.get(`${url}/notes.json`);\r\n\r\n        if(res.data != null || undefined) {\r\n            const payload = Object.keys(res.data).map(key => {\r\n                return {\r\n                    ...res.data[key],\r\n                    id: key\r\n                }\r\n            }) \r\n\r\n            dispatch({type: FETCH_NOTES, payload})\r\n        } \r\n        \r\n        if(!res.data) {\r\n            showLoader();\r\n        }\r\n        \r\n\r\n        \r\n    }\r\n\r\n    const addNote = async title => {\r\n        const note = {\r\n            title, date: new Date().toJSON()\r\n        }\r\n        try {\r\n            const res = await axios.post(`${url}/notes.json`, note);\r\n            const payload = {\r\n                ...note,\r\n                id: res.data.name\r\n            }\r\n\r\n            dispatch({type: ADD_NOTE, payload})\r\n\r\n        } catch (e) {\r\n            throw new Error(e.message)\r\n        }\r\n \r\n       \r\n    }\r\n\r\n    const removeNote = async id => {\r\n        await axios.delete(`${url}/notes/${id}.json`)\r\n\r\n        dispatch({\r\n            type: REMOVE_NOTE,\r\n            payload: id\r\n        })\r\n    }\r\n\r\n    return (\r\n        <FirebaseContext.Provider value={{\r\n            showLoader, addNote, removeNote, fetchNotes,\r\n            loading: state.loading,\r\n            notes: state.notes\r\n        }}\r\n        >\r\n            {children}        \r\n        </FirebaseContext.Provider>\r\n    )       \r\n}","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\nimport { Home } from './pages/Home'\r\nimport { About } from './pages/About'\r\nimport { Navbar } from './components/Navbar';\r\nimport { Alert } from './components/Alert';\r\nimport { AlertState } from './context/alert/AlertState';\r\nimport { FirebaseState } from './context/firebase/FirebaseState';\r\n\r\nfunction App() {\r\n  return (\r\n    <FirebaseState>\r\n      <AlertState>\r\n        <BrowserRouter>\r\n        \r\n        <Navbar />\r\n        <Alert />\r\n        <div className=\"container pt-4\">\r\n            <Switch>\r\n              <Route path={'/'} exact component={Home} />\r\n              <Route path={'/about'} component={About} />\r\n            </Switch>\r\n        </div>\r\n        </BrowserRouter>\r\n      </AlertState>\r\n    </FirebaseState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}